# Check proper functioning of the gl_PrimitiveID fragment shader input, in the
# case where there is no geometry shader, and polygon mode is set to points.

[require]
GLSL >= 1.50

[vertex shader]
#version 150

in vec4 piglit_vertex;
flat out int vertex_id;

void main()
{
  gl_Position = piglit_vertex;
  vertex_id = gl_VertexID;
}

[fragment shader]
#version 150

flat in int vertex_id;

void main()
{
  /* We draw a triangle fan containing 6 vertices, so the relationship between
   * the primitive ID and the input vertex ID's should be:
   *
   * Primitive ID  Vertex ID's  Provoking vertex ID
   *  0             0 1 2        1
   *  1             0 2 3        2
   *  2             0 3 4        3
   *  3             0 4 5        4
   *
   * Since vertex_id uses interpolation qualifier "flat", it should
   * always receive the value from the provoking vertex.  Therefore,
   * by the table above, it should always be 2 greater than the
   * expected value of gl_PrimitiveID.
   */
  int expected_primitive_id = vertex_id - 2;
  if (expected_primitive_id == gl_PrimitiveID)
    gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0);
  else
    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}

[vertex data]
piglit_vertex/float/2
-0.99 -0.99
-0.99  0.99
 0.00  0.99
 0.99  0.99
 0.99  0.00
 0.99 -0.99

[test]

# This is a little bit lame. :(  Point, and to a lesser extent line,
# rasterization mode doesn't draw very much.  That makes it hard to probe in a
# shader_runner test.  Instead, clear the screen to the "expected" color.  The
# shader will draw a different color for failing pixels, and "probe all" will
# detect the problem.
#
# This won't catch cases where the test doesn't draw anything.  Hopefully
# problems of that nature will have already been caught by other tests.

clear color 0.0 1.0 0.0 1.0
clear
polygon mode GL_FRONT_AND_BACK GL_POINT
draw arrays GL_TRIANGLE_FAN 0 6
probe all rgba 0.0 1.0 0.0 1.0
